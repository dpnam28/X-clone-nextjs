// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  desc        String   @db.VarChar(255)
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
  img         String?
  video       String?
  isSensitive Boolean  @default(false)

  //Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  rePostId Int?
  rePost   Post?  @relation("Reposts", fields: [rePostId], references: [id])
  rePosts  Post[] @relation("Reposts")

  parentPostId Int?
  parentPost   Post?  @relation("PostComments", fields: [parentPostId], references: [id])
  comments     Post[] @relation("PostComments")

  likes      Like[]
  savedPosts SavedPosts[]
}

model User {
  id          String  @id
  username    String  @unique
  displayName String?
  name        String?
  bio         String?
  location    String?
  website     String?
  job         String?
  img         String?
  cover       String?

  //Relations
  post       Post[]
  likes      Like[]
  savedPosts SavedPosts[]
  followings Follow[]     @relation("UserFollowings")
  followers  Follow[]     @relation("UserFollowers")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  //Relations
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model SavedPosts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  //Relations
  userId String
  postId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
}

model Follow {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  //Relations
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])
}
